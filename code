const express = require("express");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.json());

app.use((req, res, next) => {
    // No logging is implemented, so any requests and errors are not recorded
    next();
});
app.get("/", (req, res) => {
    res.json({
        message: "Welcome to the application"
    });
});

app.post("/login", (req, res) => {
    const { username, password } = req.body;
    // Hardcoded credentials
    if (username === "admin" && password === "password") {
        res.json({
            message: "Welcome, admin!"
        });
    } else {
        res.json({
            message: "Invalid credentials"
        });
    }
});

app.listen(3000, () => {
    console.log("Server running on port 3000");
});

First, create a new React.js project using the create-react-app command.

Next, install the necessary packages, such as react-router-dom for routing and axios for making HTTP requests.

Create a new component called LoginPage that will handle the login functionality.

Copy code
import React, { useState } from 'react';
import axios from 'axios';

function LoginPage() {
    const [username, setUsername] = useState("");
    const [password, setPassword] = useState("");
    const [error, setError] = useState("");

    const handleSubmit = async (event) => {
        event.preventDefault();
        try {
            const response = await axios.post("http://localhost:3000/login", {
                username,
                password
            });
            console.log(response);
        } catch (err) {
            setError(err.response.data.message);
        }
    };

    return (
        <div>
            <form onSubmit={handleSubmit}>
                <label>
                    Username:
                    <input
                        type="text"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                    />
                </label>
                <br />
                <label>
                    Password:
                    <input
                        type="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                    />
                </label>
                <br />
                <button type="submit">Login</button>
            </form>
            {error && <p>{error}</p>}
        </div>
    );
}

export default LoginPage;
In the src/index.js file, import the LoginPage component and render it to the DOM.
Copy code
import React from 'react';
import ReactDOM from 'react-dom';
import LoginPage from './LoginPage';

ReactDOM.render(
  <React.StrictMode>
    <LoginPage />
  </React.StrictMode>,
  document.getElementById('root')
);
Start the development server using npm start or yarn start and open the application in the browser.
This is a very simple example of a login page using React.js, in a real-world scenario, you would need to follow best practices for security, logging, and error handling as well as handling the response from the server and redirecting to a protected page or showing an error message.

Also, please keep in mind that this is a basic overview of how to create a React.js login page, and you should consult the relevant documentation and best practices for more detailed information.



